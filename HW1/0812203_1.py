# -*- coding: utf-8 -*-
"""0812203_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16hVTynHoRxhMjS8VD4k4K1bSRJ0sdAAC
"""

!wget https://lab.djosix.com/eight_puzzle.py -qO eight_puzzle.py
!sha1sum eight_puzzle.py

from eight_puzzle import EightPuzzle, test
import heapq

def H(state):
  final = (1,2,3,4,5,6,7,8,0)
  sum = 0
  for i in range(0,9):
    if state[i] != final[i]:
      sum += 1
  return sum

def solve(p):

  openTable = []
  step = {p.state:[]}
  G = {p.state:0}
  F = {p.state:G[p.state] + H(p.state)}

  heapq.heappush(openTable, (F[p.state],p.state))
  
  while openTable:
    current = heapq.heappop(openTable)[1]
    if current == p.FINAL_STATE:
      return step[current]
    for d in p.DIRECTIONS:
      next = p.get_state_after_move(current,d)
      if next is not None and next not in step:
        G[next] = G[current] + 1
        F[next] = G[next] + H(next)
        heapq.heappush(openTable, (F[next],next))
        step[next] = step[current]+[d]
  return []

results = test(solve, seed=123, n=10)